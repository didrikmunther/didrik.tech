{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","speed","setSpeed","audio","useRef","rate","setRate","amount","setAmount","next","setNext","useEffect","current","loop","playbackRate","timeout","setInterval","v","timeout2","clearInterval","clearTimeout","reset","useCallback","currentTime","play","className","src","autoPlay","ref","toFixed","min","max","step","value","onChange","target","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMA6EeA,G,MA1EH,WAAO,IAAD,EACUC,mBAAiB,GAD3B,mBACTC,EADS,KACFC,EADE,KAEVC,EAAQC,iBAAyB,MAFvB,EAIQJ,mBAAiB,IAJzB,mBAITK,EAJS,KAIHC,EAJG,OAKYN,mBAAiB,KAL7B,mBAKTO,EALS,KAKDC,EALC,OAMQR,mBAAiBK,GANzB,mBAMTI,EANS,KAMHC,EANG,KAQhBC,qBAAU,WACJR,EAAMS,UAGVT,EAAMS,QAAQC,MAAO,EACrBV,EAAMS,QAAQE,aAAeb,KAC5B,CAACE,EAAOF,IAEXU,qBAAU,WACR,IAAMI,EAAUC,aAAY,WAC1Bd,GAAS,SAAAe,GAAC,OAAIA,EAAKV,KACnBG,EAAQL,KACA,IAAPA,GAEGa,EAAWF,aAAY,WAC3BN,GAAQ,SAAAO,GAAC,OAAIA,EAAI,OAChB,KAEH,OAAO,WACLE,cAAcJ,GACdK,aAAaF,MAEd,CAACb,EAAME,IAEV,IAAMc,EAAQC,uBAAY,WACpBnB,EAAMS,UAGVT,EAAMS,QAAQW,YAAc,KAC3B,CAACpB,IAEEqB,EAAOF,uBAAY,WACnBnB,EAAMS,UAGVT,EAAMS,QAAQW,YAAc,EAC5BpB,EAAMS,QAAQY,UACb,CAACrB,IAEJ,OACE,sBAAKsB,UAAU,MAAf,UACE,uBAAOC,IAAI,aAAaC,UAAU,EAAMC,IAAKzB,IAE7C,kDAA6B,IAARF,GAAa4B,QAAQ,GAA1C,OACA,uDAA0BpB,KAE1B,iDAAmB,uBACjBqB,IAAK,EACLC,IAAK,EACLC,KAAM,KACNC,MAAO1B,EACP2B,SAAU,SAAAjB,GAAC,OAAIT,GAAWS,EAAEkB,OAAOF,QACnCG,KAAK,WANP,YAM0B,uBACtBN,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,MAAO5B,EACP6B,SAAU,SAAAjB,GAAC,OAAIX,GAASW,EAAEkB,OAAOF,QACjCG,KAAK,WAZT,cAcA,wBAAQC,QAASb,EAAjB,kBACA,wBAAQa,QAAShB,EAAjB,wBC1DSiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f0131101.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [speed, setSpeed] = useState<number>(1);\n  const audio = useRef<HTMLAudioElement>(null);\n\n  const [rate, setRate] = useState<number>(20); // per second\n  const [amount, setAmount] = useState<number>(.01);\n  const [next, setNext] = useState<number>(rate);\n\n  useEffect(() => {\n    if(!audio.current)\n      return;\n\n    audio.current.loop = true;\n    audio.current.playbackRate = speed;\n  }, [audio, speed]);\n\n  useEffect(() => {\n    const timeout = setInterval(() => {\n      setSpeed(v => v += amount);\n      setNext(rate);\n    }, rate * 1e3);\n\n    const timeout2 = setInterval(() => {\n      setNext(v => v - 1);\n    }, 1e3);\n\n    return () => {\n      clearInterval(timeout);\n      clearTimeout(timeout2);\n    };\n  }, [rate, amount]);\n\n  const reset = useCallback(() => {\n    if(!audio.current)\n      return;\n\n    audio.current.currentTime = 0;\n  }, [audio]);\n\n  const play = useCallback(() => {\n    if(!audio.current)\n      return;\n\n    audio.current.currentTime = 0;\n    audio.current.play();\n  }, [audio]);\n\n  return (\n    <div className=\"App\">\n      <audio src=\"./song.mp3\" autoPlay={true} ref={audio} />\n\n      <h2>Current Speed: {(speed * 100).toFixed(1)}%</h2>\n      <h3>Next speed increase: {next}</h3>\n\n      <p>Change speed by <input\n        min={0}\n        max={1}\n        step={.001}\n        value={amount}\n        onChange={v => setAmount(+v.target.value)}\n        type=\"number\"/> % every <input\n          min={5}\n          max={30}\n          step={1}\n          value={rate}\n          onChange={v => setRate(+v.target.value)}\n          type=\"number\"/> second.</p>\n\n      <button onClick={play}>Play</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}